{"version":3,"names":["mockDOM","global","document","getElementById","jest","fn","createElement","body","appendChild","insertAdjacentHTML","head","addEventListener","window","Notification","AudioContext","webkitAudioContext","focus","location","origin","localStorage","getItem","setItem","console","log","warn","error","URL","createObjectURL","revokeObjectURL","Blob","setTimeout","clearTimeout","setInterval","clearInterval","createNotificationSystem","NOTIFICATION_CONFIG","duration","success","info","warning","urgent","maxNotifications","position","animation","enter","exit","sound","call","channels","browser","whatsapp","email","sms","proximity","enabled","threshold","urgentThreshold","notificationState","activeNotifications","notificationId","isInitialized","container","soundEnabled","pushPermission","whatsappConfig","emailConfig","currentQueuePosition","callAudio","proximityNotified","initializePushNotifications","sendBrowserPushNotification","title","message","options","notification","icon","badge","tag","requireInteraction","silent","initializeWhatsAppIntegration","apiUrl","businessNumber","sendWhatsAppNotification","phoneNumber","reason","whatsappUrl","encodeURIComponent","phone","url","messageId","Date","now","initializeEmailIntegration","apiKey","fromEmail","fromName","sendEmailNotification","toEmail","subject","emailData","to","from","html","actionUrl","actionText","checkProximityNotifications","currentPosition","totalInQueue","Math","abs","sendUrgentProximityNotification","type","sendProximityNotification","playProximitySound","playCallSound","playing","stopCallSound","sendPaymentConfirmationNotification","appointmentData","price","toFixed","sendQueuePositionUpdateNotification","newPosition","estimatedWaitTime","estimatedTime","sendConsultationReadyNotification","doctorData","name","describe","notificationSystem","beforeEach","clearAllMocks","test","expect","toBe","toHaveBeenCalledWith","mockNotification","close","result","not","toHaveBeenCalled","toEqual","toMatch","originalEncodeURIComponent","Error","toBeDefined","objectContaining","stringContaining","mock","calls","find","toContain","id","specialty","queuePosition","patientPhone","patientEmail","paymentResult","whatsappResult","emailResult","result1","result2","result3","initialState","afterProximity","afterCall","afterStop","browserResult","proximityResult","callResult"],"sources":["multi-channel-notifications.test.js"],"sourcesContent":["/**\r\n * Testes Unitários - Sistema de Notificações Multi-Canal\r\n * Tarefa 7: Desenvolver sistema de notificações multi-canal\r\n * \r\n * Testa todas as implementações:\r\n * - Notificações push do navegador\r\n * - Integração WhatsApp\r\n * - Sistema de email\r\n * - Notificações de proximidade\r\n * - Alertas sonoros\r\n */\r\n\r\n// Mock do DOM e APIs do navegador\r\nconst mockDOM = () => {\r\n    global.document = {\r\n        getElementById: jest.fn(),\r\n        createElement: jest.fn(),\r\n        body: {\r\n            appendChild: jest.fn(),\r\n            insertAdjacentHTML: jest.fn()\r\n        },\r\n        head: {\r\n            appendChild: jest.fn()\r\n        },\r\n        addEventListener: jest.fn()\r\n    };\r\n\r\n    global.window = {\r\n        Notification: jest.fn(),\r\n        AudioContext: jest.fn(),\r\n        webkitAudioContext: jest.fn(),\r\n        focus: jest.fn(),\r\n        location: {\r\n            origin: 'https://telemed.test.com'\r\n        },\r\n        localStorage: {\r\n            getItem: jest.fn(),\r\n            setItem: jest.fn()\r\n        }\r\n    };\r\n\r\n    global.console = {\r\n        log: jest.fn(),\r\n        warn: jest.fn(),\r\n        error: jest.fn()\r\n    };\r\n\r\n    global.URL = {\r\n        createObjectURL: jest.fn(() => 'blob:test-url'),\r\n        revokeObjectURL: jest.fn()\r\n    };\r\n\r\n    global.Blob = jest.fn();\r\n    global.setTimeout = jest.fn((fn) => fn());\r\n    global.clearTimeout = jest.fn();\r\n    global.setInterval = jest.fn();\r\n    global.clearInterval = jest.fn();\r\n};\r\n\r\n// Mock das funções de notificação (simulando o arquivo notifications.js)\r\nconst createNotificationSystem = () => {\r\n    const NOTIFICATION_CONFIG = {\r\n        duration: {\r\n            success: 5000,\r\n            info: 4000,\r\n            warning: 6000,\r\n            error: 8000,\r\n            urgent: 10000\r\n        },\r\n        maxNotifications: 5,\r\n        position: 'top-right',\r\n        animation: {\r\n            enter: 'slideInRight',\r\n            exit: 'slideOutRight'\r\n        },\r\n        sound: {\r\n            success: true,\r\n            error: true,\r\n            warning: true,\r\n            info: false,\r\n            urgent: true,\r\n            call: true\r\n        },\r\n        channels: {\r\n            browser: true,\r\n            whatsapp: false,\r\n            email: false,\r\n            sms: false\r\n        },\r\n        proximity: {\r\n            enabled: true,\r\n            threshold: 3,\r\n            urgentThreshold: 1\r\n        }\r\n    };\r\n\r\n    let notificationState = {\r\n        activeNotifications: [],\r\n        notificationId: 0,\r\n        isInitialized: false,\r\n        container: null,\r\n        soundEnabled: true,\r\n        pushPermission: null,\r\n        whatsappConfig: null,\r\n        emailConfig: null,\r\n        currentQueuePosition: null,\r\n        callAudio: null,\r\n        proximityNotified: false\r\n    };\r\n\r\n    // Função para inicializar notificações push\r\n    const initializePushNotifications = async () => {\r\n        if (!global.window.Notification) {\r\n            console.warn('🚫 Browser does not support notifications');\r\n            NOTIFICATION_CONFIG.channels.browser = false;\r\n            return;\r\n        }\r\n\r\n        notificationState.pushPermission = 'granted';\r\n        NOTIFICATION_CONFIG.channels.browser = true;\r\n        console.log('✅ Browser push notifications enabled');\r\n    };\r\n\r\n    // Função para enviar notificação push do navegador\r\n    const sendBrowserPushNotification = (title, message, options = {}) => {\r\n        if (!NOTIFICATION_CONFIG.channels.browser || notificationState.pushPermission !== 'granted') {\r\n            return false;\r\n        }\r\n\r\n        const notification = new global.window.Notification(title, {\r\n            body: message,\r\n            icon: '/favicon.ico',\r\n            badge: '/favicon.ico',\r\n            tag: options.tag || 'telemed-notification',\r\n            requireInteraction: options.requireInteraction || false,\r\n            silent: options.silent || false,\r\n            ...options\r\n        });\r\n\r\n        console.log('📱 Browser push notification sent:', title);\r\n        return notification;\r\n    };\r\n\r\n    // Função para inicializar integração WhatsApp\r\n    const initializeWhatsAppIntegration = () => {\r\n        notificationState.whatsappConfig = {\r\n            apiUrl: 'https://api.whatsapp.com/send',\r\n            businessNumber: '+5511999999999',\r\n            enabled: false\r\n        };\r\n        console.log('📱 WhatsApp integration initialized (demo mode)');\r\n    };\r\n\r\n    // Função para enviar mensagem WhatsApp\r\n    const sendWhatsAppNotification = async (phoneNumber, message, options = {}) => {\r\n        if (!NOTIFICATION_CONFIG.channels.whatsapp || !notificationState.whatsappConfig.enabled) {\r\n            console.log('📱 WhatsApp notifications disabled');\r\n            return { success: false, reason: 'disabled' };\r\n        }\r\n\r\n        try {\r\n            const whatsappUrl = `${notificationState.whatsappConfig.apiUrl}?phone=${phoneNumber}&text=${encodeURIComponent(message)}`;\r\n            \r\n            console.log('📱 WhatsApp notification sent:', {\r\n                phone: phoneNumber,\r\n                message: message,\r\n                url: whatsappUrl\r\n            });\r\n\r\n            return { success: true, messageId: 'wa_' + Date.now() };\r\n        } catch (error) {\r\n            console.error('❌ Error sending WhatsApp notification:', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    // Função para inicializar integração de email\r\n    const initializeEmailIntegration = () => {\r\n        notificationState.emailConfig = {\r\n            apiUrl: 'https://api.emailservice.com/send',\r\n            apiKey: 'demo-api-key',\r\n            fromEmail: 'noreply@telemed.com',\r\n            fromName: 'TeleMed',\r\n            enabled: false\r\n        };\r\n        console.log('📧 Email integration initialized (demo mode)');\r\n    };\r\n\r\n    // Função para enviar notificação por email\r\n    const sendEmailNotification = async (toEmail, subject, message, options = {}) => {\r\n        if (!NOTIFICATION_CONFIG.channels.email || !notificationState.emailConfig.enabled) {\r\n            console.log('📧 Email notifications disabled');\r\n            return { success: false, reason: 'disabled' };\r\n        }\r\n\r\n        try {\r\n            const emailData = {\r\n                to: toEmail,\r\n                from: notificationState.emailConfig.fromEmail,\r\n                fromName: notificationState.emailConfig.fromName,\r\n                subject: subject,\r\n                html: `\r\n                    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n                        <div style=\"background: linear-gradient(135deg, #3b82f6, #2563eb); color: white; padding: 20px; text-align: center;\">\r\n                            <h1 style=\"margin: 0;\">TeleMed</h1>\r\n                            <p style=\"margin: 5px 0 0 0; opacity: 0.9;\">Sistema de Telemedicina</p>\r\n                        </div>\r\n                        <div style=\"padding: 30px 20px;\">\r\n                            <h2 style=\"color: #1f2937; margin-bottom: 20px;\">${subject}</h2>\r\n                            <div style=\"color: #4b5563; line-height: 1.6;\">\r\n                                ${message}\r\n                            </div>\r\n                            ${options.actionUrl ? `\r\n                                <div style=\"text-align: center; margin-top: 30px;\">\r\n                                    <a href=\"${options.actionUrl}\" \r\n                                       style=\"background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;\">\r\n                                        ${options.actionText || 'Acessar Plataforma'}\r\n                                    </a>\r\n                                </div>\r\n                            ` : ''}\r\n                        </div>\r\n                        <div style=\"background: #f9fafb; padding: 20px; text-align: center; color: #6b7280; font-size: 12px;\">\r\n                            <p>Esta é uma mensagem automática do sistema TeleMed.</p>\r\n                            <p>Se você não solicitou esta notificação, pode ignorar este email.</p>\r\n                        </div>\r\n                    </div>\r\n                `,\r\n                ...options\r\n            };\r\n\r\n            console.log('📧 Email notification sent:', emailData);\r\n            return { success: true, messageId: 'email_' + Date.now() };\r\n        } catch (error) {\r\n            console.error('❌ Error sending email notification:', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    // Função para verificar notificações de proximidade\r\n    const checkProximityNotifications = (currentPosition, totalInQueue = 10) => {\r\n        if (!NOTIFICATION_CONFIG.proximity.enabled) return false;\r\n\r\n        const { threshold, urgentThreshold } = NOTIFICATION_CONFIG.proximity;\r\n        \r\n        // Resetar flag se a posição mudou significativamente\r\n        if (notificationState.currentQueuePosition && \r\n            Math.abs(currentPosition - notificationState.currentQueuePosition) > 2) {\r\n            notificationState.proximityNotified = false;\r\n        }\r\n\r\n        notificationState.currentQueuePosition = currentPosition;\r\n\r\n        // Notificação urgente - é o próximo\r\n        if (currentPosition <= urgentThreshold && !notificationState.proximityNotified) {\r\n            sendUrgentProximityNotification(currentPosition);\r\n            notificationState.proximityNotified = true;\r\n            return { type: 'urgent', position: currentPosition };\r\n        }\r\n        // Notificação de proximidade - está próximo\r\n        else if (currentPosition <= threshold && !notificationState.proximityNotified) {\r\n            sendProximityNotification(currentPosition);\r\n            notificationState.proximityNotified = true;\r\n            return { type: 'proximity', position: currentPosition };\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    // Função para enviar notificação de proximidade\r\n    const sendProximityNotification = (position) => {\r\n        const title = '🟡 Quase sua vez!';\r\n        const message = `Você está na posição ${position}. Prepare-se para sua consulta!`;\r\n\r\n        console.log('🎯 Proximity notification sent for position:', position);\r\n        return { title, message, position };\r\n    };\r\n\r\n    // Função para enviar notificação urgente de proximidade\r\n    const sendUrgentProximityNotification = (position) => {\r\n        const title = position === 1 ? '🟢 Você é o próximo!' : '🔴 Sua consulta está pronta!';\r\n        const message = position === 1 ? \r\n            'Mantenha-se pronto! Você será chamado em breve.' : \r\n            'Sua consulta está pronta. Clique para entrar!';\r\n\r\n        console.log('🚨 Urgent proximity notification sent for position:', position);\r\n        return { title, message, position };\r\n    };\r\n\r\n    // Função para tocar som de proximidade\r\n    const playProximitySound = () => {\r\n        if (!notificationState.soundEnabled || !NOTIFICATION_CONFIG.sound.warning) return false;\r\n\r\n        console.log('🎵 Proximity sound played');\r\n        return true;\r\n    };\r\n\r\n    // Função para tocar som de chamada\r\n    const playCallSound = () => {\r\n        if (!notificationState.soundEnabled || !NOTIFICATION_CONFIG.sound.call) return false;\r\n\r\n        console.log('📞 Call sound started');\r\n        notificationState.callAudio = { playing: true };\r\n        return true;\r\n    };\r\n\r\n    // Função para parar som de chamada\r\n    const stopCallSound = () => {\r\n        if (notificationState.callAudio) {\r\n            notificationState.callAudio = null;\r\n            console.log('🔇 Call sound stopped');\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    // Função para notificação de confirmação de pagamento\r\n    const sendPaymentConfirmationNotification = (appointmentData) => {\r\n        const title = '✅ Pagamento Confirmado';\r\n        const message = `Pagamento de R$ ${appointmentData.price.toFixed(2)} confirmado. Você foi adicionado à fila!`;\r\n\r\n        console.log('💳 Payment confirmation notification sent');\r\n        return { title, message, appointmentData };\r\n    };\r\n\r\n    // Função para notificação de atualização de posição na fila\r\n    const sendQueuePositionUpdateNotification = (newPosition, estimatedWaitTime) => {\r\n        if (newPosition <= NOTIFICATION_CONFIG.proximity.urgentThreshold) {\r\n            return sendUrgentProximityNotification(newPosition);\r\n        } else if (newPosition <= NOTIFICATION_CONFIG.proximity.threshold) {\r\n            return sendProximityNotification(newPosition);\r\n        } else {\r\n            const title = 'Posição Atualizada';\r\n            const message = `Você está na posição ${newPosition}. Tempo estimado: ${estimatedWaitTime} min`;\r\n            console.log('📊 Queue position update notification sent');\r\n            return { title, message, position: newPosition, estimatedTime: estimatedWaitTime };\r\n        }\r\n    };\r\n\r\n    // Função para notificação de consulta pronta\r\n    const sendConsultationReadyNotification = (doctorData) => {\r\n        const title = '🎥 Sua Consulta Está Pronta!';\r\n        const message = `${doctorData.name} está aguardando você na sala de consulta.`;\r\n\r\n        console.log('🎥 Consultation ready notification sent');\r\n        return { title, message, doctorData };\r\n    };\r\n\r\n    return {\r\n        NOTIFICATION_CONFIG,\r\n        notificationState,\r\n        initializePushNotifications,\r\n        sendBrowserPushNotification,\r\n        initializeWhatsAppIntegration,\r\n        sendWhatsAppNotification,\r\n        initializeEmailIntegration,\r\n        sendEmailNotification,\r\n        checkProximityNotifications,\r\n        sendProximityNotification,\r\n        sendUrgentProximityNotification,\r\n        playProximitySound,\r\n        playCallSound,\r\n        stopCallSound,\r\n        sendPaymentConfirmationNotification,\r\n        sendQueuePositionUpdateNotification,\r\n        sendConsultationReadyNotification\r\n    };\r\n};\r\n\r\ndescribe('Sistema de Notificações Multi-Canal - Tarefa 7', () => {\r\n    let notificationSystem;\r\n\r\n    beforeEach(() => {\r\n        mockDOM();\r\n        notificationSystem = createNotificationSystem();\r\n        jest.clearAllMocks();\r\n    });\r\n\r\n    describe('1. Notificações Push do Navegador', () => {\r\n        test('deve inicializar notificações push com sucesso', async () => {\r\n            // Arrange\r\n            global.window.Notification = jest.fn();\r\n\r\n            // Act\r\n            await notificationSystem.initializePushNotifications();\r\n\r\n            // Assert\r\n            expect(notificationSystem.NOTIFICATION_CONFIG.channels.browser).toBe(true);\r\n            expect(notificationSystem.notificationState.pushPermission).toBe('granted');\r\n            expect(console.log).toHaveBeenCalledWith('✅ Browser push notifications enabled');\r\n        });\r\n\r\n        test('deve detectar quando o navegador não suporta notificações', async () => {\r\n            // Arrange\r\n            delete global.window.Notification;\r\n\r\n            // Act\r\n            await notificationSystem.initializePushNotifications();\r\n\r\n            // Assert\r\n            expect(notificationSystem.NOTIFICATION_CONFIG.channels.browser).toBe(false);\r\n            expect(console.warn).toHaveBeenCalledWith('🚫 Browser does not support notifications');\r\n        });\r\n\r\n        test('deve enviar notificação push do navegador', () => {\r\n            // Arrange\r\n            const mockNotification = { close: jest.fn() };\r\n            global.window.Notification = jest.fn(() => mockNotification);\r\n            notificationSystem.notificationState.pushPermission = 'granted';\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.browser = true;\r\n\r\n            // Act\r\n            const result = notificationSystem.sendBrowserPushNotification(\r\n                'Teste Push',\r\n                'Mensagem de teste',\r\n                { tag: 'test-notification' }\r\n            );\r\n\r\n            // Assert\r\n            expect(global.window.Notification).toHaveBeenCalledWith('Teste Push', {\r\n                body: 'Mensagem de teste',\r\n                icon: '/favicon.ico',\r\n                badge: '/favicon.ico',\r\n                tag: 'test-notification',\r\n                requireInteraction: false,\r\n                silent: false\r\n            });\r\n            expect(result).toBe(mockNotification);\r\n            expect(console.log).toHaveBeenCalledWith('📱 Browser push notification sent:', 'Teste Push');\r\n        });\r\n\r\n        test('não deve enviar push notification se não tiver permissão', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.pushPermission = 'denied';\r\n\r\n            // Act\r\n            const result = notificationSystem.sendBrowserPushNotification('Teste', 'Mensagem');\r\n\r\n            // Assert\r\n            expect(result).toBe(false);\r\n            expect(global.window.Notification).not.toHaveBeenCalled();\r\n        });\r\n    });\r\n\r\n    describe('2. Integração WhatsApp', () => {\r\n        test('deve inicializar integração WhatsApp', () => {\r\n            // Act\r\n            notificationSystem.initializeWhatsAppIntegration();\r\n\r\n            // Assert\r\n            expect(notificationSystem.notificationState.whatsappConfig).toEqual({\r\n                apiUrl: 'https://api.whatsapp.com/send',\r\n                businessNumber: '+5511999999999',\r\n                enabled: false\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('📱 WhatsApp integration initialized (demo mode)');\r\n        });\r\n\r\n        test('deve enviar mensagem WhatsApp quando habilitado', async () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.whatsapp = true;\r\n            notificationSystem.notificationState.whatsappConfig = {\r\n                apiUrl: 'https://api.whatsapp.com/send',\r\n                businessNumber: '+5511999999999',\r\n                enabled: true\r\n            };\r\n\r\n            // Act\r\n            const result = await notificationSystem.sendWhatsAppNotification(\r\n                '+5511987654321',\r\n                'Sua consulta está confirmada!'\r\n            );\r\n\r\n            // Assert\r\n            expect(result.success).toBe(true);\r\n            expect(result.messageId).toMatch(/^wa_\\d+$/);\r\n            expect(console.log).toHaveBeenCalledWith('📱 WhatsApp notification sent:', {\r\n                phone: '+5511987654321',\r\n                message: 'Sua consulta está confirmada!',\r\n                url: 'https://api.whatsapp.com/send?phone=+5511987654321&text=Sua%20consulta%20est%C3%A1%20confirmada!'\r\n            });\r\n        });\r\n\r\n        test('não deve enviar WhatsApp se estiver desabilitado', async () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.whatsapp = false;\r\n\r\n            // Act\r\n            const result = await notificationSystem.sendWhatsAppNotification(\r\n                '+5511987654321',\r\n                'Teste'\r\n            );\r\n\r\n            // Assert\r\n            expect(result.success).toBe(false);\r\n            expect(result.reason).toBe('disabled');\r\n            expect(console.log).toHaveBeenCalledWith('📱 WhatsApp notifications disabled');\r\n        });\r\n\r\n        test('deve tratar erros no envio de WhatsApp', async () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.whatsapp = true;\r\n            notificationSystem.notificationState.whatsappConfig = {\r\n                apiUrl: null, // Simular erro\r\n                enabled: true\r\n            };\r\n\r\n            // Mock para forçar erro\r\n            const originalEncodeURIComponent = global.encodeURIComponent;\r\n            global.encodeURIComponent = jest.fn(() => {\r\n                throw new Error('Simulated error');\r\n            });\r\n\r\n            // Act\r\n            const result = await notificationSystem.sendWhatsAppNotification(\r\n                '+5511987654321',\r\n                'Teste'\r\n            );\r\n\r\n            // Restore\r\n            global.encodeURIComponent = originalEncodeURIComponent;\r\n\r\n            // Assert\r\n            expect(result.success).toBe(false);\r\n            expect(result.error).toBeDefined();\r\n        });\r\n    });\r\n\r\n    describe('3. Sistema de Email', () => {\r\n        test('deve inicializar integração de email', () => {\r\n            // Act\r\n            notificationSystem.initializeEmailIntegration();\r\n\r\n            // Assert\r\n            expect(notificationSystem.notificationState.emailConfig).toEqual({\r\n                apiUrl: 'https://api.emailservice.com/send',\r\n                apiKey: 'demo-api-key',\r\n                fromEmail: 'noreply@telemed.com',\r\n                fromName: 'TeleMed',\r\n                enabled: false\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('📧 Email integration initialized (demo mode)');\r\n        });\r\n\r\n        test('deve enviar notificação por email quando habilitado', async () => {\r\n            // Arrange\r\n            notificationSystem.initializeEmailIntegration(); // Inicializar primeiro\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.email = true;\r\n            notificationSystem.notificationState.emailConfig.enabled = true;\r\n\r\n            // Act\r\n            const result = await notificationSystem.sendEmailNotification(\r\n                'paciente@teste.com',\r\n                'Consulta Confirmada',\r\n                'Sua consulta foi confirmada com sucesso!',\r\n                {\r\n                    actionUrl: 'https://telemed.com/consulta',\r\n                    actionText: 'Acessar Consulta'\r\n                }\r\n            );\r\n\r\n            // Assert\r\n            expect(result.success).toBe(true);\r\n            expect(result.messageId).toMatch(/^email_\\d+$/);\r\n            expect(console.log).toHaveBeenCalledWith('📧 Email notification sent:', expect.objectContaining({\r\n                to: 'paciente@teste.com',\r\n                subject: 'Consulta Confirmada',\r\n                html: expect.stringContaining('TeleMed')\r\n            }));\r\n        });\r\n\r\n        test('deve incluir botão de ação no email quando fornecido', async () => {\r\n            // Arrange\r\n            notificationSystem.initializeEmailIntegration(); // Inicializar primeiro\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.email = true;\r\n            notificationSystem.notificationState.emailConfig.enabled = true;\r\n\r\n            // Act\r\n            const result = await notificationSystem.sendEmailNotification(\r\n                'paciente@teste.com',\r\n                'Teste',\r\n                'Mensagem de teste',\r\n                {\r\n                    actionUrl: 'https://telemed.com/action',\r\n                    actionText: 'Clique Aqui'\r\n                }\r\n            );\r\n\r\n            // Assert\r\n            expect(result.success).toBe(true);\r\n            const emailData = console.log.mock.calls.find(call => \r\n                call[0] === '📧 Email notification sent:'\r\n            )[1];\r\n            expect(emailData.html).toContain('https://telemed.com/action');\r\n            expect(emailData.html).toContain('Clique Aqui');\r\n        });\r\n\r\n        test('não deve enviar email se estiver desabilitado', async () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.email = false;\r\n\r\n            // Act\r\n            const result = await notificationSystem.sendEmailNotification(\r\n                'paciente@teste.com',\r\n                'Teste',\r\n                'Mensagem'\r\n            );\r\n\r\n            // Assert\r\n            expect(result.success).toBe(false);\r\n            expect(result.reason).toBe('disabled');\r\n            expect(console.log).toHaveBeenCalledWith('📧 Email notifications disabled');\r\n        });\r\n    });\r\n\r\n    describe('4. Notificações de Proximidade', () => {\r\n        test('deve detectar quando usuário está próximo (posição 3)', () => {\r\n            // Act\r\n            const result = notificationSystem.checkProximityNotifications(3);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                type: 'proximity',\r\n                position: 3\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('🎯 Proximity notification sent for position:', 3);\r\n        });\r\n\r\n        test('deve detectar quando usuário é o próximo (posição 1)', () => {\r\n            // Act\r\n            const result = notificationSystem.checkProximityNotifications(1);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                type: 'urgent',\r\n                position: 1\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('🚨 Urgent proximity notification sent for position:', 1);\r\n        });\r\n\r\n        test('não deve notificar se posição for maior que threshold', () => {\r\n            // Act\r\n            const result = notificationSystem.checkProximityNotifications(5);\r\n\r\n            // Assert\r\n            expect(result).toBe(false);\r\n        });\r\n\r\n        test('deve resetar flag de proximidade quando posição muda significativamente', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.currentQueuePosition = 10;\r\n            notificationSystem.notificationState.proximityNotified = true;\r\n\r\n            // Act\r\n            const result = notificationSystem.checkProximityNotifications(3);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                type: 'proximity',\r\n                position: 3\r\n            });\r\n            expect(notificationSystem.notificationState.proximityNotified).toBe(true);\r\n        });\r\n\r\n        test('não deve notificar novamente se já foi notificado', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.proximityNotified = true;\r\n            notificationSystem.notificationState.currentQueuePosition = 3;\r\n\r\n            // Act\r\n            const result = notificationSystem.checkProximityNotifications(3);\r\n\r\n            // Assert\r\n            expect(result).toBe(false);\r\n        });\r\n\r\n        test('deve desabilitar notificações de proximidade se configurado', () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.proximity.enabled = false;\r\n\r\n            // Act\r\n            const result = notificationSystem.checkProximityNotifications(1);\r\n\r\n            // Assert\r\n            expect(result).toBe(false);\r\n        });\r\n    });\r\n\r\n    describe('5. Alertas Sonoros', () => {\r\n        test('deve tocar som de proximidade quando habilitado', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.soundEnabled = true;\r\n            notificationSystem.NOTIFICATION_CONFIG.sound.warning = true;\r\n\r\n            // Act\r\n            const result = notificationSystem.playProximitySound();\r\n\r\n            // Assert\r\n            expect(result).toBe(true);\r\n            expect(console.log).toHaveBeenCalledWith('🎵 Proximity sound played');\r\n        });\r\n\r\n        test('não deve tocar som de proximidade se desabilitado', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.soundEnabled = false;\r\n\r\n            // Act\r\n            const result = notificationSystem.playProximitySound();\r\n\r\n            // Assert\r\n            expect(result).toBe(false);\r\n        });\r\n\r\n        test('deve tocar som de chamada quando habilitado', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.soundEnabled = true;\r\n            notificationSystem.NOTIFICATION_CONFIG.sound.call = true;\r\n\r\n            // Act\r\n            const result = notificationSystem.playCallSound();\r\n\r\n            // Assert\r\n            expect(result).toBe(true);\r\n            expect(notificationSystem.notificationState.callAudio).toEqual({ playing: true });\r\n            expect(console.log).toHaveBeenCalledWith('📞 Call sound started');\r\n        });\r\n\r\n        test('deve parar som de chamada', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.callAudio = { playing: true };\r\n\r\n            // Act\r\n            const result = notificationSystem.stopCallSound();\r\n\r\n            // Assert\r\n            expect(result).toBe(true);\r\n            expect(notificationSystem.notificationState.callAudio).toBe(null);\r\n            expect(console.log).toHaveBeenCalledWith('🔇 Call sound stopped');\r\n        });\r\n\r\n        test('não deve parar som se não estiver tocando', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.callAudio = null;\r\n\r\n            // Act\r\n            const result = notificationSystem.stopCallSound();\r\n\r\n            // Assert\r\n            expect(result).toBe(false);\r\n        });\r\n    });\r\n\r\n    describe('6. Notificações Específicas do Sistema', () => {\r\n        test('deve enviar notificação de confirmação de pagamento', () => {\r\n            // Arrange\r\n            const appointmentData = {\r\n                id: 'test-123',\r\n                specialty: 'Cardiologia',\r\n                price: 89.90,\r\n                queuePosition: 3\r\n            };\r\n\r\n            // Act\r\n            const result = notificationSystem.sendPaymentConfirmationNotification(appointmentData);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                title: '✅ Pagamento Confirmado',\r\n                message: 'Pagamento de R$ 89.90 confirmado. Você foi adicionado à fila!',\r\n                appointmentData\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('💳 Payment confirmation notification sent');\r\n        });\r\n\r\n        test('deve enviar notificação de atualização de posição na fila', () => {\r\n            // Act\r\n            const result = notificationSystem.sendQueuePositionUpdateNotification(5, 25);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                title: 'Posição Atualizada',\r\n                message: 'Você está na posição 5. Tempo estimado: 25 min',\r\n                position: 5,\r\n                estimatedTime: 25\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('📊 Queue position update notification sent');\r\n        });\r\n\r\n        test('deve enviar notificação urgente para posição 1 na fila', () => {\r\n            // Act\r\n            const result = notificationSystem.sendQueuePositionUpdateNotification(1, 0);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                title: '🟢 Você é o próximo!',\r\n                message: 'Mantenha-se pronto! Você será chamado em breve.',\r\n                position: 1\r\n            });\r\n        });\r\n\r\n        test('deve enviar notificação de consulta pronta', () => {\r\n            // Arrange\r\n            const doctorData = {\r\n                name: 'Dr. João Silva',\r\n                specialty: 'Cardiologia'\r\n            };\r\n\r\n            // Act\r\n            const result = notificationSystem.sendConsultationReadyNotification(doctorData);\r\n\r\n            // Assert\r\n            expect(result).toEqual({\r\n                title: '🎥 Sua Consulta Está Pronta!',\r\n                message: 'Dr. João Silva está aguardando você na sala de consulta.',\r\n                doctorData\r\n            });\r\n            expect(console.log).toHaveBeenCalledWith('🎥 Consultation ready notification sent');\r\n        });\r\n    });\r\n\r\n    describe('7. Integração e Fluxos Completos', () => {\r\n        test('deve executar fluxo completo de confirmação de pagamento', async () => {\r\n            // Arrange\r\n            notificationSystem.initializeWhatsAppIntegration(); // Inicializar primeiro\r\n            notificationSystem.initializeEmailIntegration(); // Inicializar primeiro\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.browser = true;\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.whatsapp = true;\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.email = true;\r\n            notificationSystem.notificationState.pushPermission = 'granted';\r\n            notificationSystem.notificationState.whatsappConfig.enabled = true;\r\n            notificationSystem.notificationState.emailConfig.enabled = true;\r\n\r\n            const appointmentData = {\r\n                id: 'test-123',\r\n                specialty: 'Cardiologia',\r\n                price: 89.90,\r\n                queuePosition: 3,\r\n                patientPhone: '+5511987654321',\r\n                patientEmail: 'paciente@teste.com'\r\n            };\r\n\r\n            // Act\r\n            const paymentResult = notificationSystem.sendPaymentConfirmationNotification(appointmentData);\r\n            const whatsappResult = await notificationSystem.sendWhatsAppNotification(\r\n                appointmentData.patientPhone,\r\n                `${paymentResult.title}\\n\\n${paymentResult.message}`\r\n            );\r\n            const emailResult = await notificationSystem.sendEmailNotification(\r\n                appointmentData.patientEmail,\r\n                paymentResult.title,\r\n                paymentResult.message\r\n            );\r\n\r\n            // Assert\r\n            expect(paymentResult.title).toBe('✅ Pagamento Confirmado');\r\n            expect(whatsappResult.success).toBe(true);\r\n            expect(emailResult.success).toBe(true);\r\n        });\r\n\r\n        test('deve executar fluxo completo de proximidade na fila', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.soundEnabled = true;\r\n            notificationSystem.NOTIFICATION_CONFIG.sound.warning = true;\r\n\r\n            // Act - Usuário entra na posição 5\r\n            let result1 = notificationSystem.checkProximityNotifications(5);\r\n            \r\n            // Act - Usuário avança para posição 3 (proximidade)\r\n            let result2 = notificationSystem.checkProximityNotifications(3);\r\n            \r\n            // Act - Usuário avança para posição 1 (urgente)\r\n            notificationSystem.notificationState.proximityNotified = false; // Reset para testar\r\n            let result3 = notificationSystem.checkProximityNotifications(1);\r\n\r\n            // Assert\r\n            expect(result1).toBe(false); // Posição 5 não notifica\r\n            expect(result2.type).toBe('proximity'); // Posição 3 notifica proximidade\r\n            expect(result3.type).toBe('urgent'); // Posição 1 notifica urgente\r\n        });\r\n\r\n        test('deve gerenciar estado de notificações corretamente', () => {\r\n            // Arrange & Act\r\n            const initialState = { ...notificationSystem.notificationState };\r\n            \r\n            // Simular mudanças de estado\r\n            notificationSystem.checkProximityNotifications(3);\r\n            const afterProximity = { ...notificationSystem.notificationState };\r\n            \r\n            notificationSystem.playCallSound();\r\n            const afterCall = { ...notificationSystem.notificationState };\r\n            \r\n            notificationSystem.stopCallSound();\r\n            const afterStop = { ...notificationSystem.notificationState };\r\n\r\n            // Assert\r\n            expect(initialState.proximityNotified).toBe(false);\r\n            expect(afterProximity.proximityNotified).toBe(true);\r\n            expect(afterProximity.currentQueuePosition).toBe(3);\r\n            expect(afterCall.callAudio).toEqual({ playing: true });\r\n            expect(afterStop.callAudio).toBe(null);\r\n        });\r\n    });\r\n\r\n    describe('8. Configurações e Personalização', () => {\r\n        test('deve respeitar configurações de canais desabilitados', async () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.browser = false;\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.whatsapp = false;\r\n            notificationSystem.NOTIFICATION_CONFIG.channels.email = false;\r\n\r\n            // Act\r\n            const browserResult = notificationSystem.sendBrowserPushNotification('Teste', 'Mensagem');\r\n            const whatsappResult = await notificationSystem.sendWhatsAppNotification('+5511999999999', 'Teste');\r\n            const emailResult = await notificationSystem.sendEmailNotification('test@test.com', 'Teste', 'Mensagem');\r\n\r\n            // Assert\r\n            expect(browserResult).toBe(false);\r\n            expect(whatsappResult.success).toBe(false);\r\n            expect(emailResult.success).toBe(false);\r\n        });\r\n\r\n        test('deve respeitar configurações de som desabilitado', () => {\r\n            // Arrange\r\n            notificationSystem.notificationState.soundEnabled = false;\r\n\r\n            // Act\r\n            const proximityResult = notificationSystem.playProximitySound();\r\n            const callResult = notificationSystem.playCallSound();\r\n\r\n            // Assert\r\n            expect(proximityResult).toBe(false);\r\n            expect(callResult).toBe(false);\r\n        });\r\n\r\n        test('deve respeitar thresholds de proximidade personalizados', () => {\r\n            // Arrange\r\n            notificationSystem.NOTIFICATION_CONFIG.proximity.threshold = 5;\r\n            notificationSystem.NOTIFICATION_CONFIG.proximity.urgentThreshold = 2;\r\n\r\n            // Act\r\n            const result1 = notificationSystem.checkProximityNotifications(5); // Proximidade\r\n            notificationSystem.notificationState.proximityNotified = false;\r\n            const result2 = notificationSystem.checkProximityNotifications(2); // Urgente\r\n            notificationSystem.notificationState.proximityNotified = false;\r\n            const result3 = notificationSystem.checkProximityNotifications(6); // Nenhuma\r\n\r\n            // Assert\r\n            expect(result1.type).toBe('proximity');\r\n            expect(result2.type).toBe('urgent');\r\n            expect(result3).toBe(false);\r\n        });\r\n    });\r\n});"],"mappings":"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","ignoreList":[]}